points shape:  (119317, 5)
{'batch_size': 1,
 'frame_id': array([0]),
 'points': array([[ 0.        ,  1.05966604,  8.82326794,  0.14690997,  0.18000001,
         0.        ],
       [ 0.        , 13.7680006 ,  2.26390767, -1.58630908,  0.31999999,
         0.        ],
       [ 0.        ,  4.30365753, -2.73233795, -1.79725969,  0.25      ,
         0.        ],
       ...,
       [ 0.        ,  0.13176291, -4.87005615, -1.83422291,  0.31999999,
         0.        ],
       [ 0.        , -5.5336833 , -3.87157154, -1.93006694,  0.34      ,
         0.        ],
       [ 0.        ,  4.20796347, -1.6349932 , -1.77126002,  0.2       ,
         0.        ]]),
 'use_lead_xyz': array([ True]),
 'voxel_coords': array([[  0,  25, 837, 734],
       [  0,  17, 750, 903],
       [  0,  16, 683, 777],
       ...,
       [  0,  17, 527, 824],
       [  0,  23, 675, 581],
       [  0,  27, 492, 655]], dtype=int32),
 'voxel_num_points': array([3, 2, 3, ..., 1, 1, 1], dtype=int32),
 'voxels': array([[[  1.059666  ,   8.823268  ,   0.14690997,   0.18      ,
           0.        ],
        [  1.0869011 ,   8.817215  ,   0.14688753,   0.22      ,
           0.        ],
        [  1.1151491 ,   8.814159  ,   0.14686917,   0.37      ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]],

       [[ 13.768001  ,   2.2639077 ,  -1.5863091 ,   0.32      ,
           0.        ],
        [ 13.773727  ,   2.3088284 ,  -1.5882883 ,   0.36      ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]],

       [[  4.3036575 ,  -2.732338  ,  -1.7972597 ,   0.25      ,
           0.        ],
        [  4.2893114 ,  -2.7043724 ,  -1.7872831 ,   0.27      ,
           0.        ],
        [  4.283982  ,  -2.73833   ,  -1.792244  ,   0.26      ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]],

       ...,

       [[  7.8262167 , -14.4353075 ,  -1.4941752 ,   0.41      ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]],

       [[-10.355981  ,  -3.3570375 ,  -0.33524984,   0.29      ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]],

       [[ -4.800179  , -17.06203   ,   0.42307967,   0.3       ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        ...,
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ],
        [  0.        ,   0.        ,   0.        ,   0.        ,
           0.        ]]], dtype=float32)}
module #################################################################
MeanVFE()

batch_dict: 

{'batch_size': 1,
 'frame_id': array([0]),
 'points': tensor([[ 0.0000,  1.0597,  8.8233,  0.1469,  0.1800,  0.0000],
        [ 0.0000, 13.7680,  2.2639, -1.5863,  0.3200,  0.0000],
        [ 0.0000,  4.3037, -2.7323, -1.7973,  0.2500,  0.0000],
        ...,
        [ 0.0000,  0.1318, -4.8701, -1.8342,  0.3200,  0.0000],
        [ 0.0000, -5.5337, -3.8716, -1.9301,  0.3400,  0.0000],
        [ 0.0000,  4.2080, -1.6350, -1.7713,  0.2000,  0.0000]],
       device='cuda:0'),
 'use_lead_xyz': tensor([1.], device='cuda:0'),
 'voxel_coords': tensor([[  0.,  25., 837., 734.],
        [  0.,  17., 750., 903.],
        [  0.,  16., 683., 777.],
        ...,
        [  0.,  17., 527., 824.],
        [  0.,  23., 675., 581.],
        [  0.,  27., 492., 655.]], device='cuda:0'),
 'voxel_features': tensor([[  1.0872,   8.8182,   0.1469,   0.2567,   0.0000],
        [ 13.7709,   2.2864,  -1.5873,   0.3400,   0.0000],
        [  4.2923,  -2.7250,  -1.7923,   0.2600,   0.0000],
        ...,
        [  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
        [-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
        [ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000]], device='cuda:0'),
 'voxel_num_points': tensor([3., 2., 3.,  ..., 1., 1., 1.], device='cuda:0'),
 'voxels': tensor([[[  1.0597,   8.8233,   0.1469,   0.1800,   0.0000],
         [  1.0869,   8.8172,   0.1469,   0.2200,   0.0000],
         [  1.1151,   8.8142,   0.1469,   0.3700,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ 13.7680,   2.2639,  -1.5863,   0.3200,   0.0000],
         [ 13.7737,   2.3088,  -1.5883,   0.3600,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[  4.3037,  -2.7323,  -1.7973,   0.2500,   0.0000],
         [  4.2893,  -2.7044,  -1.7873,   0.2700,   0.0000],
         [  4.2840,  -2.7383,  -1.7922,   0.2600,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        ...,

        [[  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]]], device='cuda:0')}
#################################################################


module #################################################################
VoxelResBackBone8xVoxelNeXt(
  (conv_input): SparseSequential(
    (0): SubMConv3d(5, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseBasicBlock(
      (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (2): SparseBasicBlock(
      (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (2): SparseBasicBlock(
      (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (2): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (2): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv6): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
    (2): SparseBasicBlock(
      (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (relu): ReLU()
      (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
      (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    )
  )
  (conv_out): SparseSequential(
    (0): SparseConv2d(128, 128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (shared_conv): SparseSequential(
    (0): SubMConv2d(128, 128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
    (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
)

batch_dict: 

{'batch_size': 1,
 'encoded_spconv_tensor': SparseConvTensor[shape=torch.Size([11985, 128])],
 'encoded_spconv_tensor_stride': 8,
 'frame_id': array([0]),
 'multi_scale_3d_features': {'x_conv1': SparseConvTensor[shape=torch.Size([59551, 16])],
                             'x_conv2': SparseConvTensor[shape=torch.Size([65823, 32])],
                             'x_conv3': SparseConvTensor[shape=torch.Size([35158, 64])],
                             'x_conv4': SparseConvTensor[shape=torch.Size([21819, 128])]},
 'multi_scale_3d_strides': {'x_conv1': 1,
                            'x_conv2': 2,
                            'x_conv3': 4,
                            'x_conv4': 8},
 'points': tensor([[ 0.0000,  1.0597,  8.8233,  0.1469,  0.1800,  0.0000],
        [ 0.0000, 13.7680,  2.2639, -1.5863,  0.3200,  0.0000],
        [ 0.0000,  4.3037, -2.7323, -1.7973,  0.2500,  0.0000],
        ...,
        [ 0.0000,  0.1318, -4.8701, -1.8342,  0.3200,  0.0000],
        [ 0.0000, -5.5337, -3.8716, -1.9301,  0.3400,  0.0000],
        [ 0.0000,  4.2080, -1.6350, -1.7713,  0.2000,  0.0000]],
       device='cuda:0'),
 'use_lead_xyz': tensor([1.], device='cuda:0'),
 'voxel_coords': tensor([[  0.,  25., 837., 734.],
        [  0.,  17., 750., 903.],
        [  0.,  16., 683., 777.],
        ...,
        [  0.,  17., 527., 824.],
        [  0.,  23., 675., 581.],
        [  0.,  27., 492., 655.]], device='cuda:0'),
 'voxel_features': tensor([[  1.0872,   8.8182,   0.1469,   0.2567,   0.0000],
        [ 13.7709,   2.2864,  -1.5873,   0.3400,   0.0000],
        [  4.2923,  -2.7250,  -1.7923,   0.2600,   0.0000],
        ...,
        [  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
        [-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
        [ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000]], device='cuda:0'),
 'voxel_num_points': tensor([3., 2., 3.,  ..., 1., 1., 1.], device='cuda:0'),
 'voxels': tensor([[[  1.0597,   8.8233,   0.1469,   0.1800,   0.0000],
         [  1.0869,   8.8172,   0.1469,   0.2200,   0.0000],
         [  1.1151,   8.8142,   0.1469,   0.3700,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ 13.7680,   2.2639,  -1.5863,   0.3200,   0.0000],
         [ 13.7737,   2.3088,  -1.5883,   0.3600,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[  4.3037,  -2.7323,  -1.7973,   0.2500,   0.0000],
         [  4.2893,  -2.7044,  -1.7873,   0.2700,   0.0000],
         [  4.2840,  -2.7383,  -1.7922,   0.2600,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        ...,

        [[  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]]], device='cuda:0')}
#################################################################


module #################################################################
VoxelNeXtHead(
  (heads_list): ModuleList(
    (0): SeparateHead(
      (center): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (center_z): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (dim): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (rot): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (vel): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (hm): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
    )
    (1-2): 2 x SeparateHead(
      (center): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (center_z): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (dim): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (rot): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (vel): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (hm): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
    )
    (3): SeparateHead(
      (center): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (center_z): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (dim): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (rot): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (vel): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (hm): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
    )
    (4-5): 2 x SeparateHead(
      (center): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (center_z): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (dim): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (rot): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (vel): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
      (hm): Sequential(
        (0): SparseSequential(
          (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
      )
    )
  )
  (hm_loss_func): FocalLossSparse()
  (reg_loss_func): RegLossSparse()
)

batch_dict: 

{'batch_size': 1,
 'encoded_spconv_tensor': SparseConvTensor[shape=torch.Size([11985, 128])],
 'encoded_spconv_tensor_stride': 8,
 'final_box_dicts': [{'pred_boxes': tensor([[ 1.1301e+01,  3.2135e+00, -8.4909e-01,  ..., -3.1331e+00,
         -2.1728e-08,  7.5798e-10],
        [-9.6393e+00,  5.5970e+00, -9.6704e-01,  ...,  2.7076e+00,
         -2.1728e-08,  7.5798e-10],
        [-4.4167e+00,  3.6432e+00, -1.1363e+00,  ...,  3.0870e+00,
         -2.1728e-08,  7.5798e-10],
        ...,
        [ 6.5437e+00, -7.0392e+00, -5.6044e-01,  ...,  2.6010e+00,
         -7.2933e-03, -2.3327e-02],
        [ 5.3483e+00, -4.4814e+01,  5.0453e-01,  ..., -8.7017e-01,
         -1.0362e-02, -2.2274e-02],
        [-3.1488e+00,  8.2659e+00, -9.7976e-01,  ..., -2.1682e+00,
         -3.1722e-09, -1.0264e-09]], device='cuda:0'),
                      'pred_ious': [None, None, None, None, None, None],
                      'pred_labels': tensor([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  2,  2,
         2,  2,  3,  2,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  4,  4,  4,  5,  4,  4,  4,  4,  5,  4,  4,  5,  4,  6,  6,  6,
         6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10,  9,  9,  9,  9,  9,  9,
         9,  9,  9,  9,  9,  9,  9, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
         9,  9,  9, 10], device='cuda:0'),
                      'pred_scores': tensor([0.8960, 0.8871, 0.8734, 0.8621, 0.8570, 0.8556, 0.8512, 0.8486, 0.8434,
        0.8369, 0.6274, 0.4800, 0.4785, 0.4664, 0.4572, 0.4345, 0.4213, 0.3827,
        0.3577, 0.3497, 0.3493, 0.3345, 0.3140, 0.2792, 0.2586, 0.1935, 0.1925,
        0.1858, 0.1808, 0.1530, 0.1526, 0.1385, 0.1369, 0.1295, 0.1290, 0.1289,
        0.1277, 0.1244, 0.1182, 0.1172, 0.1155, 0.1126, 0.1119, 0.1111, 0.1100,
        0.1076, 0.1052, 0.1043, 0.1022, 0.1016, 0.1009, 0.3527, 0.3427, 0.2390,
        0.2148, 0.1952, 0.1603, 0.1585, 0.1556, 0.1424, 0.1375, 0.1368, 0.1341,
        0.1253, 0.1194, 0.1191, 0.1188, 0.1161, 0.1111, 0.1108, 0.1087, 0.1065,
        0.1062, 0.1041, 0.6316, 0.4040, 0.3917, 0.2667, 0.2160, 0.1796, 0.1673,
        0.1667, 0.1355, 0.1221, 0.1132, 0.1115, 0.1103, 0.1502, 0.1397, 0.1327,
        0.1008, 0.5869, 0.3726, 0.3659, 0.3480, 0.3167, 0.3125, 0.3056, 0.2729,
        0.2116, 0.1979, 0.1769, 0.1753, 0.1744, 0.1726, 0.1682, 0.1681, 0.1583,
        0.1516, 0.1494, 0.1443, 0.1425, 0.1403, 0.1364, 0.1346, 0.1321, 0.1280,
        0.1260, 0.1249, 0.1218, 0.1185, 0.1116, 0.1112, 0.1090, 0.1089, 0.1035,
        0.1008, 0.2138, 0.2039, 0.2036, 0.2032, 0.1937, 0.1758, 0.1689, 0.1650,
        0.1621, 0.1604, 0.1571, 0.1555, 0.1534, 0.1457, 0.1456, 0.1438, 0.1382,
        0.1376, 0.1306, 0.1293, 0.1280, 0.1273, 0.1266, 0.1227, 0.1215, 0.1207,
        0.1205, 0.1201, 0.1166, 0.1152, 0.1134, 0.1134, 0.1132, 0.1110, 0.1101,
        0.1095, 0.1084, 0.1081, 0.1025], device='cuda:0')}],
 'frame_id': array([0]),
 'multi_scale_3d_features': {'x_conv1': SparseConvTensor[shape=torch.Size([59551, 16])],
                             'x_conv2': SparseConvTensor[shape=torch.Size([65823, 32])],
                             'x_conv3': SparseConvTensor[shape=torch.Size([35158, 64])],
                             'x_conv4': SparseConvTensor[shape=torch.Size([21819, 128])]},
 'multi_scale_3d_strides': {'x_conv1': 1,
                            'x_conv2': 2,
                            'x_conv3': 4,
                            'x_conv4': 8},
 'points': tensor([[ 0.0000,  1.0597,  8.8233,  0.1469,  0.1800,  0.0000],
        [ 0.0000, 13.7680,  2.2639, -1.5863,  0.3200,  0.0000],
        [ 0.0000,  4.3037, -2.7323, -1.7973,  0.2500,  0.0000],
        ...,
        [ 0.0000,  0.1318, -4.8701, -1.8342,  0.3200,  0.0000],
        [ 0.0000, -5.5337, -3.8716, -1.9301,  0.3400,  0.0000],
        [ 0.0000,  4.2080, -1.6350, -1.7713,  0.2000,  0.0000]],
       device='cuda:0'),
 'use_lead_xyz': tensor([1.], device='cuda:0'),
 'voxel_coords': tensor([[  0.,  25., 837., 734.],
        [  0.,  17., 750., 903.],
        [  0.,  16., 683., 777.],
        ...,
        [  0.,  17., 527., 824.],
        [  0.,  23., 675., 581.],
        [  0.,  27., 492., 655.]], device='cuda:0'),
 'voxel_features': tensor([[  1.0872,   8.8182,   0.1469,   0.2567,   0.0000],
        [ 13.7709,   2.2864,  -1.5873,   0.3400,   0.0000],
        [  4.2923,  -2.7250,  -1.7923,   0.2600,   0.0000],
        ...,
        [  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
        [-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
        [ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000]], device='cuda:0'),
 'voxel_num_points': tensor([3., 2., 3.,  ..., 1., 1., 1.], device='cuda:0'),
 'voxels': tensor([[[  1.0597,   8.8233,   0.1469,   0.1800,   0.0000],
         [  1.0869,   8.8172,   0.1469,   0.2200,   0.0000],
         [  1.1151,   8.8142,   0.1469,   0.3700,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ 13.7680,   2.2639,  -1.5863,   0.3200,   0.0000],
         [ 13.7737,   2.3088,  -1.5883,   0.3600,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[  4.3037,  -2.7323,  -1.7973,   0.2500,   0.0000],
         [  4.2893,  -2.7044,  -1.7873,   0.2700,   0.0000],
         [  4.2840,  -2.7383,  -1.7922,   0.2600,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        ...,

        [[  7.8262, -14.4353,  -1.4942,   0.4100,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[-10.3560,  -3.3570,  -0.3352,   0.2900,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]],

        [[ -4.8002, -17.0620,   0.4231,   0.3000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         ...,
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000],
         [  0.0000,   0.0000,   0.0000,   0.0000,   0.0000]]], device='cuda:0')}
#################################################################


